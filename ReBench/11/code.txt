#[version = "0.0.5"]
def @main(%x0: Tensor[(1, 64, 56, 56), float32], %x1: Tensor[(64, 64, 3, 3), float32], %x2: Tensor[(4096, 3, 3), float32], %x3: Tensor[(1, 64, 56, 56), float32], %x4: float32, %x5: Tensor[(4, 64, 3, 3), float32]) {
    %0 = multiply(%x1, 2.0f);
    %1 = nn.conv2d(%x0, %0, strides=[1, 1], padding=[1, 1, 1, 1], dilation=[1, 1], groups=1, channels=64, kernel_size=[3, 3], data_layout="NCHW", kernel_layout="OIHW", out_layout="", out_dtype="");
    %2 = add(0.0f, %1);
    %3 = nn.relu(%2);
    %4 = nn.max_pool2d(%3, pool_size=[2, 2], strides=[2, 2], dilation=[1, 1], padding=[0, 0, 0, 0], layout="NCHW", out_layout="", ceil_mode=0);
    %5 = nn.upsampling(%4, scale_h=2.0f, scale_w=2.0f, layout="NCHW", method="nearest_neighbor", align_corners=0);
    %6 = (%5, %3);
    %7 = concatenate(%6, axis=1);
    %8 = add(%7, 1.0f);
    %9 = ones_like(1.0f);
    %10 = add(1.0f, %9);
    %11 = nn.relu(%0);
    %12 = add(%11, 1.0f);
    %13 = nn.relu(%0);
    %14 = add(%13, 1.0f);
    %15 = add(%12, %14);
    %16 = shape_of(%x2, dtype="int32");
    %17 = dyn.reshape(%11, %16, newshape=[], allowzero=0);
    %18 = shape_of(%11, dtype="int32");
    %19 = dyn.reshape(%17, %18, newshape=[], allowzero=0);
    %20 = layout_transform(%5, src_layout="NCHW", dst_layout="NHWC");
    %21 = layout_transform(%20, src_layout="NHWC", dst_layout="NCHW");
    %22 = nn.relu(%21);
    %23 = full_like(%18, %x4);
    %24 = (%x1, %x5);
    %25 = concatenate(%24, axis=0);
    %26 = add(%x0, %x3);
    %27 = ndarray_size(%26, dtype="int32");
    %28 = less(%27, 10);
    %29 = min(%28, axis=None, keepdims=0, exclude=0);
    %30 = (%8, %10, %15, %19, %22, %23, %25, %29);
    %30
}
