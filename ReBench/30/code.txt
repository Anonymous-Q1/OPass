#[version = "0.0.5"]
def @main(%x0: Tensor[(1, 3, 224, 224), uint8], %x1: Tensor[(3, 224, 224), float32], %x2: Tensor[(224,), float32]) {
    %0 = qnn.dequantize(%x0, 2.0f, 114, axis=-1);
    %1 = clip(%0, a_min=0.0f, a_max=6.0f);
    %2 = qnn.quantize(%1, 2.0f, 114, out_dtype="uint8", axis=-1);
    %3 = shape_of(%x1, dtype="int32");
    %4 = dyn.reshape(%1, %3, newshape=[], allowzero=0);
    %5 = multiply(%0, %0);
    let %x3 = %5;
    %6 = zeros_like(%0);
    %7 = ones_like(%x3);
    let %x4 = %7;
    %8 = multiply(%x4, %0);
    %9 = collapse_sum_like(%8, %0);
    %10 = add(%6, %9);
    %11 = multiply(%x4, %0);
    %12 = collapse_sum_like(%11, %0);
    %13 = add(%10, %12);
    %14 = (%13,);
    %15 = (%x3, %14);
    %16 = qnn.dequantize(%x0, 2.0f, 114, axis=-1);
    %17 = clip(%16, a_min=0.0f, a_max=6.0f);
    %18 = qnn.quantize(%17, 2.0f, 114, out_dtype="uint8", axis=-1);
    %19 = ones_like(%6);
    %20 = add(%6, %19);
    %21 = nn.batch_to_space_nd(%10, block_shape=[2, 2], crops=[[0, 1], [0, 1]]);
    %22 = add(2.0f, 2.0f);
    %23 = nn.relu(%9);
    %24 = transpose(%23, axes=[0, 2, 3, 1]);
    %25 = transpose(%24, axes=[1, 2, 3, 0]);
    %26 = transpose(%25, axes=[3, 2, 0, 1]);
    %27 = collapse_sum_like(%x1, %x2);
    %28 = add(%19, 1.0f);
    %29 = exp(%28);
    %30 = squeeze(%29, axis=None);
    %31 = (%2, %4, %15, %18, %20, %21, %22, %26, %27, %30);
    %31
}
