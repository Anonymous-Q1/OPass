#[version = "0.0.5"]
def @main(%x0: Tensor[(1, 3, 224, 224), int8], %x1: Tensor[(9, 224, 224), float32], %x2: Tensor[(58,), int32]) {
    %0 = qnn.dequantize(%x0, 2.0f, -12, axis=-1);
    %1 = add(%0, 1.0f);
    %2 = add(%0, 1.0f);
    %3 = add(%0, 1.0f);
    %4 = (%1, %2, %3);
    %5 = concatenate(%4, axis=1);
    %6 = add(%5, 1.0f);
    %7 = add(%0, 1.0f);
    %8 = add(%0, 1.0f);
    %9 = add(%0, 1.0f);
    %10 = (%7, %8, %9);
    %11 = concatenate(%10, axis=1);
    %12 = add(%11, 1.0f);
    %13 = add(%0, 1.0f);
    %14 = add(%0, 1.0f);
    %15 = add(%0, 1.0f);
    %16 = (%13, %14, %15);
    %17 = concatenate(%16, axis=1);
    %18 = add(%17, 1.0f);
    %19 = (%6, %12, %18);
    %20 = concatenate(%19, axis=1);
    %21 = nn.max_pool2d(%20, pool_size=[2, 2], strides=[2, 2], dilation=[1, 1], padding=[0, 0, 0, 0], layout="NCHW", out_layout="", ceil_mode=0);
    %22 = add(%21, 1.0f);
    %23 = add(%22, 1.0f);
    %24 = (%22, %23);
    %25 = transpose(%1, axes=[0, 3, 1, 2]);
    %26 = layout_transform(%25, src_layout="NCHW", dst_layout="NCHW4c");
    %27 = nn.relu(%26);
    %28 = layout_transform(%27, src_layout="NCHW4c", dst_layout="NCHW");
    %29 = transpose(%28, axes=[0, 2, 3, 1]);
    %30 = shape_of(%x1, dtype="int32");
    %31 = dyn.reshape(%12, %30, newshape=[], allowzero=0);
    %32 = shape_of(%12, dtype="int32");
    %33 = dyn.reshape(%31, %32, newshape=[], allowzero=0);
    %34 = multiply(%2, %2);
    let %x3 = %34;
    %35 = zeros_like(%2);
    %36 = ones_like(%x3);
    let %x4 = %36;
    %37 = multiply(%x4, %2);
    %38 = collapse_sum_like(%37, %2);
    %39 = add(%35, %38);
    %40 = multiply(%x4, %2);
    %41 = collapse_sum_like(%40, %2);
    %42 = add(%39, %41);
    %43 = (%42,);
    %44 = (%x3, %43);
    %45 = nn.avg_pool2d(%0, pool_size=[3, 3], strides=[1, 1], dilation=[1, 1], padding=[0, 0, 0, 0], layout="NCHW", out_layout="", ceil_mode=0, count_include_pad=0);
    %46 = qnn.quantize(%45, 0.5f, 10, out_dtype="int8", axis=-1);
    %47 = qnn.dequantize(%46, 2.0f, 0, axis=-1);
    %48 = reshape(%47, newshape=[3, 1, 222, 222], allowzero=0);
    %49 = erf(%48);
    let %x5 = %32;
    %50 = add(0.5f, 0.5f);
    %51 = nn.max_pool2d(%37, pool_size=[2, 2], strides=[2, 2], dilation=[1, 1], padding=[0, 0, 0, 0], layout="NCHW", out_layout="", ceil_mode=0);
    %52 = nn.upsampling(%51, scale_h=2.0f, scale_w=2.0f, layout="NCHW", method="nearest_neighbor", align_corners=0);
    %53 = (%52, %37);
    %54 = qnn.dequantize(%x0, 0.626659f, -128, axis=-1);
    %55 = sqrt(%54);
    %56 = qnn.quantize(%55, 0.13107f, -128, out_dtype="int8", axis=-1);
    %57 = (%24, %29, %33, %44, %49, %x5, %50, %53, %56);
    let %x6 = %x2;
    %57
}
