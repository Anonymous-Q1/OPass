#[version = "0.0.5"]
def @main(%x0: Tensor[(5, 10), int8], %x1: Tensor[(10,), float32], %x2: Tensor[(96, 10), float32], %x3: Tensor[(58, 10), float32], %x4: Tensor[(10,), float32]) {
    %0 = add(0.1f, 0.1f);
    %1 = qnn.dequantize(%x0, 0.1f, 0, axis=-1);
    %2 = nn.softmax(%1, axis=-1);
    %3 = zeros(shape=[1], dtype="float32");
    %4 = add(%2, %3);
    %5 = zeros_like(%1);
    %6 = add(%1, %x1);
    %7 = ones_like(%6);
    %8 = collapse_sum_like(%7, %5);
    %9 = add(%5, %8);
    %10 = zeros_like(%x1);
    %11 = collapse_sum_like(%7, %10);
    %12 = add(%10, %11);
    %13 = (%9, %12);
    %14 = qnn.quantize(%2, 0.00390625f, -128, out_dtype="int8", axis=-1);
    %15 = qnn.dequantize(%14, 0.1f, 10, axis=-1);
    %16 = multiply(%15, 1.0f);
    %17 = qnn.quantize(%16, 0.1f, 10, out_dtype="int8", axis=-1);
    %18 = nn.dense(%9, %x2, units=None, out_dtype="");
    %19 = expand_dims(%18, axis=2, num_newaxis=1);
    %20 = nn.dense(%9, %x3, units=None, out_dtype="");
    %21 = expand_dims(%20, axis=2, num_newaxis=1);
    %22 = (%19, %21);
    %23 = add(%12, %x4);
    %24 = ndarray_size(%23, dtype="int32");
    %25 = qnn.dequantize(%x0, 2.0f, 0, axis=-1);
    %26 = argsort(%25, axis=1, is_ascend=1, dtype="int32");
    %27 = nn.relu(%18);
    %28 = add(%27, 1.0f);
    %29 = nn.relu(%18);
    %30 = add(%29, 1.0f);
    %31 = add(%28, %30);
    %32 = squeeze(%21, axis=None);
    %33 = add(%32, 1.0f);
    %34 = squeeze(%32, axis=None);
    %35 = add(%34, 1.0f);
    %36 = add(%35, 1.0f);
    %37 = add(%32, 1.0f);
    %38 = (%33, %36, %37);
    %39 = concatenate(%38, axis=1);
    %40 = squeeze(%39, axis=None);
    %41 = add(%40, 1.0f);
    %42 = (%0, %4, %13, %17, %22, %24, %26, %31, %41);
    %42
}
