#[version = "0.0.5"]
def @main(%x: Tensor[(1, 16, 64, 64), float32] /* ty=Tensor[(1, 16, 64, 64), float32] span=from_string:12:11 */, %w: Tensor[(16, 16, 3, 3), float32] /* ty=Tensor[(16, 16, 3, 3), float32] span=from_string:11:15 */, %w1: Tensor[(16, 16, 3, 3), float32] /* ty=Tensor[(16, 16, 3, 3), float32] span=from_string:12:15 */, %w2: Tensor[(16, 32, 3, 3), float32] /* ty=Tensor[(16, 32, 3, 3), float32] span=from_string:26:18 */, %w3: Tensor[(16, 32, 3, 3), float32] /* ty=Tensor[(16, 32, 3, 3), float32] span=from_string:27:18 */) -> Tensor[(1, 32, 64, 64), float32] {
  %0 = nn.conv2d(%x, %w, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 64, 64), float32] span=from_string:5:13 */;
  %1 = nn.conv2d(%x, %w1, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 64, 64), float32] span=from_string:9:13 */;
  %2 = nn.relu(%0) /* ty=Tensor[(1, 16, 64, 64), float32] span=from_string:4:5 */;
  %3 = nn.relu(%1) /* ty=Tensor[(1, 16, 64, 64), float32] span=from_string:8:5 */;
  %4 = (%2, %3) /* ty=(Tensor[(1, 16, 64, 64), float32], Tensor[(1, 16, 64, 64), float32]) span=from_string:15:17 */;
  %5 = concatenate(%4, axis=1) /* ty=Tensor[(1, 32, 64, 64), float32] span=from_string:14:5 */;
  %6 = nn.conv2d(%5, %w2, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 64, 64), float32] span=from_string:20:13 */;
  %7 = nn.conv2d(%5, %w3, padding=[1, 1, 1, 1], channels=16, kernel_size=[3, 3]) /* ty=Tensor[(1, 16, 64, 64), float32] span=from_string:24:13 */;
  %8 = nn.relu(%6) /* ty=Tensor[(1, 16, 64, 64), float32] span=from_string:19:5 */;
  %9 = nn.relu(%7) /* ty=Tensor[(1, 16, 64, 64), float32] span=from_string:23:5 */;
  %10 = (%8, %9) /* ty=(Tensor[(1, 16, 64, 64), float32], Tensor[(1, 16, 64, 64), float32]) span=from_string:30:17 */;
  concatenate(%10, axis=1) /* ty=Tensor[(1, 32, 64, 64), float32] span=from_string:29:5 */
}
