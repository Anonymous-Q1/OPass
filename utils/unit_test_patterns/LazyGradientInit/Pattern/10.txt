#[version = "0.0.5"]
def @main(%x: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */, %y: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */) -> (Tensor[(10, 10), float32], (Tensor[(10, 10), float32], Tensor[(10, 10), float32])) {
  %0 = fn () -> () {
    () /* ty=() */
  } /* ty=fn () -> () */;
  let %x_0: ref(fn () -> ()) /* ty=ref(fn () -> ()) */ = ref(%0);
  %1 = zeros_like(%x) /* ty=Tensor[(10, 10), float32] */;
  %2 = ref(%1);
  let %x_60: (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */ = (%x, %2) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */;
  %3 = zeros_like(%y) /* ty=Tensor[(10, 10), float32] */;
  %4 = ref(%3);
  let %x_61: (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */ = (%y, %4) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */;
  %13 = fn (%x1: (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */, %y1: (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */, %bp: ref(fn () -> ()) /* ty=ref(fn () -> ()) */) -> (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) {
    let %x_30: (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */ = let %x_1: (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */ = %x1;
    let %x_2: (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */ = %y1;
    let %x_3: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = %x_1.0 /* ty=Tensor[(10, 10), float32] */;
    let %x_4: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = %x_2.0 /* ty=Tensor[(10, 10), float32] */;
    let %x_5: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = multiply(%x_3, %x_4) /* ty=Tensor[(10, 10), float32] */;
    %5 = zeros_like(%x_5) /* ty=Tensor[(10, 10), float32] */;
    %6 = ref(%5);
    let %x_6: (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */ = (%x_5, %6) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */;
    let %x_7: (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */ = %x_6;
    let %x_8: fn () -> () /* ty=fn () -> () */ = ref_read(%bp);
    %7 = fn () -> () {
      let %x_12: ref(Tensor[(10, 10), float32]) /* ty=ref(Tensor[(10, 10), float32]) */ = %x_7.1 /* ty=ref(Tensor[(10, 10), float32]) */;
      let %x_9: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = ref_read(%x_12);
      let %x_13: ref(Tensor[(10, 10), float32]) /* ty=ref(Tensor[(10, 10), float32]) */ = %x_1.1 /* ty=ref(Tensor[(10, 10), float32]) */;
      let %x_14: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = ref_read(%x_13);
      let %x_15: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = multiply(%x_9, %x_4) /* ty=Tensor[(10, 10), float32] */;
      let %x_16: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = collapse_sum_like(%x_15, %x_3) /* ty=Tensor[(10, 10), float32] */;
      let %x_17: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = add(%x_14, %x_16) /* ty=Tensor[(10, 10), float32] */;
      let %x_18: ref(Tensor[(10, 10), float32]) /* ty=ref(Tensor[(10, 10), float32]) */ = %x_1.1 /* ty=ref(Tensor[(10, 10), float32]) */;
      let %x_10: () /* ty=() */ = ref_write(%x_18, %x_17);
      let %x_19: ref(Tensor[(10, 10), float32]) /* ty=ref(Tensor[(10, 10), float32]) */ = %x_2.1 /* ty=ref(Tensor[(10, 10), float32]) */;
      let %x_20: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = ref_read(%x_19);
      let %x_21: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = multiply(%x_9, %x_3) /* ty=Tensor[(10, 10), float32] */;
      let %x_22: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = collapse_sum_like(%x_21, %x_4) /* ty=Tensor[(10, 10), float32] */;
      let %x_23: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = add(%x_20, %x_22) /* ty=Tensor[(10, 10), float32] */;
      let %x_24: ref(Tensor[(10, 10), float32]) /* ty=ref(Tensor[(10, 10), float32]) */ = %x_2.1 /* ty=ref(Tensor[(10, 10), float32]) */;
      let %x_11: () /* ty=() */ = ref_write(%x_24, %x_23);
      let %x_25: () /* ty=() */ = %x_8() /* ty=() */;
      let %x_26: () /* ty=() */ = %x_25;
      let %x_27: () /* ty=() */ = %x_26;
      let %x_28: () /* ty=() */ = %x_27;
      %x_28
    } /* ty=fn () -> () */;
    let %x_29: () /* ty=() */ = ref_write(%bp, %7);
    %x_7;
    let %x_32: (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */ = let %x_31: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = meta[relay.Constant][0] /* ty=Tensor[(10, 10), float32] */;
    %8 = zeros_like(%x_31) /* ty=Tensor[(10, 10), float32] */;
    %9 = ref(%8);
    (%x_31, %9) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */;
    let %x_33: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = %x_30.0 /* ty=Tensor[(10, 10), float32] */;
    let %x_34: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = %x_32.0 /* ty=Tensor[(10, 10), float32] */;
    let %x_35: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = multiply(%x_33, %x_34) /* ty=Tensor[(10, 10), float32] */;
    %10 = zeros_like(%x_35) /* ty=Tensor[(10, 10), float32] */;
    %11 = ref(%10);
    let %x_36: (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */ = (%x_35, %11) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */;
    let %x_37: (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */ = %x_36;
    let %x_38: fn () -> () /* ty=fn () -> () */ = ref_read(%bp);
    %12 = fn () -> () {
      let %x_42: ref(Tensor[(10, 10), float32]) /* ty=ref(Tensor[(10, 10), float32]) */ = %x_37.1 /* ty=ref(Tensor[(10, 10), float32]) */;
      let %x_39: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = ref_read(%x_42);
      let %x_43: ref(Tensor[(10, 10), float32]) /* ty=ref(Tensor[(10, 10), float32]) */ = %x_30.1 /* ty=ref(Tensor[(10, 10), float32]) */;
      let %x_44: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = ref_read(%x_43);
      let %x_45: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = multiply(%x_39, %x_34) /* ty=Tensor[(10, 10), float32] */;
      let %x_46: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = collapse_sum_like(%x_45, %x_33) /* ty=Tensor[(10, 10), float32] */;
      let %x_47: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = add(%x_44, %x_46) /* ty=Tensor[(10, 10), float32] */;
      let %x_48: ref(Tensor[(10, 10), float32]) /* ty=ref(Tensor[(10, 10), float32]) */ = %x_30.1 /* ty=ref(Tensor[(10, 10), float32]) */;
      let %x_40: () /* ty=() */ = ref_write(%x_48, %x_47);
      let %x_49: ref(Tensor[(10, 10), float32]) /* ty=ref(Tensor[(10, 10), float32]) */ = %x_32.1 /* ty=ref(Tensor[(10, 10), float32]) */;
      let %x_50: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = ref_read(%x_49);
      let %x_51: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = multiply(%x_39, %x_33) /* ty=Tensor[(10, 10), float32] */;
      let %x_52: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = collapse_sum_like(%x_51, %x_34) /* ty=Tensor[(10, 10), float32] */;
      let %x_53: Tensor[(10, 10), float32] /* ty=Tensor[(10, 10), float32] */ = add(%x_50, %x_52) /* ty=Tensor[(10, 10), float32] */;
      let %x_54: ref(Tensor[(10, 10), float32]) /* ty=ref(Tensor[(10, 10), float32]) */ = %x_32.1 /* ty=ref(Tensor[(10, 10), float32]) */;
      let %x_41: () /* ty=() */ = ref_write(%x_54, %x_53);
      let %x_55: () /* ty=() */ = %x_38() /* ty=() */;
      let %x_56: () /* ty=() */ = %x_55;
      let %x_57: () /* ty=() */ = %x_56;
      let %x_58: () /* ty=() */ = %x_57;
      %x_58
    } /* ty=fn () -> () */;
    let %x_59: () /* ty=() */ = ref_write(%bp, %12);
    %x_37
  } /* ty=fn ((Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])), (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])), ref(fn () -> ())) -> (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */;
  let %x_62: (Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */ = %13(%x_60, %x_61, %x_0) /* ty=(Tensor[(10, 10), float32], ref(Tensor[(10, 10), float32])) */;
  %14 = %x_62.1 /* ty=ref(Tensor[(10, 10), float32]) */;
  %15 = %x_62.0 /* ty=Tensor[(10, 10), float32] */;
  %16 = ones_like(%15) /* ty=Tensor[(10, 10), float32] */;
  let %x_63: () /* ty=() */ = ref_write(%14, %16);
  %17 = ref_read(%x_0);
  let %x_64: () /* ty=() */ = %17() /* ty=() */;
  %18 = %x_60.1 /* ty=ref(Tensor[(10, 10), float32]) */;
  %19 = %x_61.1 /* ty=ref(Tensor[(10, 10), float32]) */;
  %20 = ref_read(%18);
  %21 = ref_read(%19);
  %22 = %x_62.0 /* ty=Tensor[(10, 10), float32] */;
  %23 = (%20, %21) /* ty=(Tensor[(10, 10), float32], Tensor[(10, 10), float32]) */;
  (%22, %23) /* ty=(Tensor[(10, 10), float32], (Tensor[(10, 10), float32], Tensor[(10, 10), float32])) */
}

#[metadata]
{
  "root": 1, 
  "nodes": [
    {
      "type_key": ""
    }, 
    {
      "type_key": "Map", 
      "keys": [
        "relay.Constant"
      ], 
      "data": [2]
    }, 
    {
      "type_key": "Array", 
      "data": [3]
    }, 
    {
      "type_key": "relay.Constant", 
      "attrs": {
        "_checked_type_": "6", 
        "data": "0", 
        "span": "0", 
        "virtual_device_": "4"
      }
    }, 
    {
      "type_key": "VirtualDevice", 
      "attrs": {
        "device_type_int": "-1", 
        "memory_scope": "5", 
        "target": "0", 
        "virtual_device_id": "-1"
      }
    }, 
    {
      "type_key": "runtime.String"
    }, 
    {
      "type_key": "relay.TensorType", 
      "attrs": {
        "dtype": "float32", 
        "shape": "7", 
        "span": "0"
      }
    }, 
    {
      "type_key": "Array", 
      "data": [8, 9]
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "10"
      }
    }, 
    {
      "type_key": "IntImm", 
      "attrs": {
        "dtype": "int32", 
        "span": "0", 
        "value": "10"
      }
    }
  ], 
  "b64ndarrays": [
    "P6G0lvBAXt0AAAAAAAAAAAEAAAAAAAAAAgAAAAIgAQAKAAAAAAAAAAoAAAAAAAAAkAEAAAAAAAAAAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/"
  ], 
  "attrs": {"tvm_version": "0.13.dev0"}
}