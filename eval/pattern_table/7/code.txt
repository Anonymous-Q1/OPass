#[version = "0.0.5"]
def @main(%x: Tensor[(1, 3, 224, 224), int8] /* ty=Tensor[(1, 3, 224, 224), int8] */, %w: Tensor[(16, 3, 5, 5), int8] /* ty=Tensor[(16, 3, 5, 5), int8] */) -> Tensor[(1, 16, 220, 220), int8] {
  %0 = qnn.dequantize(%x, 2f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %1 = transpose(%0, axes=[0, 1, 2, 3]) /* ty=Tensor[(1, 3, 224, 224), float32] */;
  %2 = qnn.dequantize(%w, 0.5f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(16, 3, 5, 5), float32] */;
  %3 = nn.conv2d(%1, %2, padding=[0, 0, 0, 0], kernel_size=[5, 5]) /* ty=Tensor[(1, 16, 220, 220), float32] */;
  %4 = layout_transform(%3, src_layout="NCHW", dst_layout="NCHW") /* ty=Tensor[(1, 16, 220, 220), float32] */;
  qnn.quantize(%4, 1f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8") /* ty=Tensor[(1, 16, 220, 220), int8] */
}
